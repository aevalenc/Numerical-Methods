# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  pull_request:
    types: [opened, synchronize, labeled]
  issue_comment:
    types: [created]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # This workflow contains a multiple jobs
  # bazel-build:
  #   if: (github.event.issue.pull_request && contains(github.event.issue.labels.*.name, 'check') && contains(github.event.comment.body, 'recheck')) || contains(github.event.pull_request.labels.*.name, 'check')
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     - name: Get PR branch
  #       uses: xt0rted/pull-request-comment-branch@v2
  #       id: comment-branch

  #     - name: Set latest commit status as pending
  #       uses: myrotvorets/set-commit-status-action@master
  #       with:
  #         sha: ${{ steps.comment-branch.outputs.head_sha }}
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         status: pending

  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - name: Checkout to PR branch
  #       id: checkout-branch
  #       uses: actions/checkout@v3
  #       with:
  #         ref: ${{ steps.comment-branch.outputs.head_ref }}

  #     - name: Setup Node.js 16
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16

  #     - name: Setup Bazel
  #       uses: bazelbuild/setup-bazelisk@v2

  #     - name: Build
  #       id: bazel_build
  #       run: bazel build --cxxopt="-std=c++17" //...

  #     - name: Set latest commit status as ${{ job.status }}
  #       uses: myrotvorets/set-commit-status-action@master
  #       if: always()
  #       with:
  #         sha: ${{ steps.comment-branch.outputs.head_sha }}
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         status: ${{ job.status }}

  #     - name: Comment status of job on PR
  #       uses: actions/github-script@v6
  #       if: ${{ job.status }} == failed()
  #       with:
  #         script: |
  #           const name = '${{ github.workflow   }}';
  #           const url = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
  #           const success = '${{ job.status }}' === 'success';
  #           const body = `${name}: ${success ? 'succeeded ✅' : 'failed ❌'}\n${url}`;

  #           await github.rest.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: body
  #           })

  bazel-build-and-test:
    if: contains(github.event.pull_request.labels.*.name, 'check') || contains(github.event.comment.body, 'recheck')

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout to PR branch
        uses: actions/checkout@v4

      - name: Setup bazel
        uses: bazelbuild/setup-bazelisk@v3
        
      - name: clang debug build
        run: bazel build --config=clang14 --config=c++17 --config=debug --verbose_failures --subcommands //...

      - name: gcc test fastbuild
        run: bazel test --config=gcc9 --config=c++17 --compilation_mode=fastbuild --cache_test_results=no --test_output=all --verbose_failures --subcommands //...

  cpp-lint:    
    runs-on: ubuntu-latest
    steps:
      - name: Checkout to PR branch
        id: pr_branch_data
        if: contains(github.event.pull_request.labels.*.name, 'check') || contains(github.event.issue.labels.*.name, 'check')
        uses: actions/checkout@v4

      - name: Setup linter
        if: steps.pr_branch_data.outcome == 'success'
        uses: cpp-linter/cpp-linter-action@v2
        id: linter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          style: 'file'  # Use .clang-format config file
          tidy-checks: '' # Use .clang-tidy config file
          # only 'update' a single comment in a pull request's thread.
          # thread-comments: ${{ github.event_name == 'pull_request' && 'update' }}
          thread-comments: true
          file-annotations: true

      - name: Fail fast?!
        if: steps.linter.outputs.checks-failed > 0
        run: |
          echo "Some files failed the linting checks!"
        # for actual deployment
        # run: exit 1

      

  print-context:
    runs-on: ubuntu-latest
    steps:
      - env:
          EVENT_CONTEXT: ${{ toJSON(github.event) }}
        run: |
          echo $EVENT_CONTEXT
