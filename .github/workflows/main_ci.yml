# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  pull_request:
    types: [opened, synchronize, labeled]
  issue_comment:
    types: [created]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  check_pr_labels:
    runs-on: ubuntu-latest
    name: A job to check the PR labels contain given labels
    steps:
      - name: Check PR labels action step
        id: check_pr_labels
        uses: shioyang/check-pr-labels-on-push-action@v1.0.9
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          labels: '["check"]'
        timeout-minutes: 5

  # This workflow contains a multiple jobs
  bazel-build:
    if: github.event.issue.pull_request && contains(github.event.issue.labels.*.name, 'check') && contains(github.event.comment.body, 'recheck')
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Get PR branch
        uses: xt0rted/pull-request-comment-branch@v2
        id: comment-branch

      - name: Set latest commit status as pending
        uses: myrotvorets/set-commit-status-action@master
        with:
          sha: ${{ steps.comment-branch.outputs.head_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: pending

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout to PR branch
        id: checkout-branch
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.comment-branch.outputs.head_ref }}

      - name: Setup Node.js 16
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Setup Bazel
        uses: bazelbuild/setup-bazelisk@v2

      - name: Build
        run: bazel build --cxxopt="-std=c++17" //...

      - name: Set latest commit status as ${{ job.status }}
        uses: myrotvorets/set-commit-status-action@master
        if: always()
        with:
          sha: ${{ steps.comment-branch.outputs.head_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}

      - name: Comment status of job on PR
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const name = '${{ github.workflow   }}';
            const url = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
            const success = '${{ job.status }}' === 'success';
            const body = `${name}: ${success ? 'succeeded ✅' : 'failed ❌'}\n${url}`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })

  bazel-test:
    if: contains(github.event.pull_request.labels.*.name, 'check')

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout to PR branch
        uses: actions/checkout@v3

      - name: Setup bazel
        uses: bazelbuild/setup-bazelisk@v2
        
      - name: optimize fastbuild
        run: bazel test --copt="-std=c++17" -c opt --cache_test_results=no --test_output=all //...

      - name: debug build
        run: bazel test --copt="-std=c++17" --copt="-ggdb" -c dbg --copt="-O0" --test_output=all --nocache_test_results //...

  cpp-lint:
    if: contains(github.event.issue.labels.*.name, 'check')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: cpp-linter/cpp-linter-action@v1
        id: linter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          style: file

      - name: Fail fast?!
        if: steps.linter.outputs.checks-failed > 0
        run: |
          echo "Some files failed the linting checks!"
        # for actual deployment
        # run: exit 1

  print_context:
    runs-on: ubuntu-latest
    steps:
      - env:
          EVENT_CONTEXT: ${{ toJSON(github.event) }}
        run: |
          echo $EVENT_CONTEXT
